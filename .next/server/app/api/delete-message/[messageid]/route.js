"use strict";(()=>{var e={};e.id=94,e.ids=[94],e.modules={11185:e=>{e.exports=require("mongoose")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},27790:e=>{e.exports=require("assert")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},86624:e=>{e.exports=require("querystring")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},71568:e=>{e.exports=require("zlib")},62633:(e,s,r)=>{r.r(s),r.d(s,{originalPathname:()=>y,patchFetch:()=>q,requestAsyncStorage:()=>m,routeModule:()=>p,serverHooks:()=>f,staticGenerationAsyncStorage:()=>g});var t={};r.r(t),r.d(t,{DELETE:()=>u});var o=r(73278),i=r(45002),a=r(54877),n=r(62651),d=r(4128),c=r(51534),l=r(55706);async function u(e,{params:s}){let r=s.messageid;await (0,c.Z)();let t=await (0,d.getServerSession)(l.L),o=t?.user;if(!t||!o)return Response.json({success:!1,message:"Not authenticated"},{status:401});try{let e=await n.Z.updateOne({_id:o._id},{$pull:{messages:{_id:r}}});if(0===e.modifiedCount)return Response.json({message:"Message not found or already deleted",success:!1},{status:404});return Response.json({message:"Message deleted",success:!0},{status:200})}catch(e){return console.error("Error deleting message:",e),Response.json({message:"Error deleting message",success:!1},{status:500})}}let p=new o.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/delete-message/[messageid]/route",pathname:"/api/delete-message/[messageid]",filename:"route",bundlePath:"app/api/delete-message/[messageid]/route"},resolvedPagePath:"E:\\NextJS\\mystrymessage\\src\\app\\api\\delete-message\\[messageid]\\route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:m,staticGenerationAsyncStorage:g,serverHooks:f}=p,y="/api/delete-message/[messageid]/route";function q(){return(0,a.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:g})}},55706:(e,s,r)=>{r.d(s,{L:()=>d});var t=r(76214),o=r(63506),i=r.n(o),a=r(51534),n=r(62651);let d={providers:[(0,t.Z)({id:"Credentials",name:"Credentials",credentials:{username:{label:"Username",type:"text"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.username||!e?.password)throw console.error("Invalid credentials provided:",e),Error("Both email/username and password are required.");console.log("Authorize called with:",e),await (0,a.Z)();try{let s=await n.Z.findOne({$or:[{email:e.username},{username:e.username}]});if(!s)throw console.log("No user found for identifier:",e.username),Error("No User Found with this email/username");if(!s.isVerified)throw console.log("User is not verified:",s),Error("Please verify your account before login.");let r=await i().compare(e.password,s.password);if(console.log("Password comparison result:",r),!r)throw console.log("Incorrect password for user:",s.username),Error("Incorrect Password");return s}catch(e){throw console.error("Authorization error:",e),Error("Authorization failed.")}}})],callbacks:{jwt:async({token:e,user:s})=>(console.log("JWT callback - Token before modification:",e),s&&(e._id=s._id?.toString(),e.isVerified=s.isVerified,e.isAcceptingMessage=s.isAcceptingMessages,e.username=s.username,console.log("JWT callback - Token after modification:",e)),e),session:async({session:e,token:s})=>(console.log("Session callback - Session before modification:",e),console.log("Session callback - Token:",s),s&&(e.user._id=s._id,e.user.isVerified=s.isVerified,e.user.isAcceptingMessages=s.isAcceptingMessages,e.user.username=s.username),console.log("Session callback - Session after modification:",e),e)}}},51534:(e,s,r)=>{r.d(s,{Z:()=>a});var t=r(11185),o=r.n(t);let i={},a=async function(){if(i.isConnected){console.log("Already connected to database");return}try{let e=await o().connect(process.env.MONGODB_URI||"",{});console.log("db:",e),i.isConnected=e.connections[0].readyState,console.log("db.connetions:",e.connection),console.log("DB Connected Successfully")}catch(e){console.log("Database connection failed",e),process.exit(1)}}},62651:(e,s,r)=>{r.d(s,{Z:()=>n});var t=r(11185),o=r.n(t);let i=new t.Schema({content:{type:String,required:!0},createdAt:{type:Date,required:!0,default:Date.now}}),a=new t.Schema({username:{type:String,required:[!0,"Username is required"],trim:!0,unique:!0},email:{type:String,required:[!0,"Email is Required"],unique:!0,match:[/.+\@.+\..+/,"please use a valid email adderss"]},password:{type:String,required:[!0,"password is required"]},verifyCode:{type:String,required:[!0,"Verify Code is required"]},verifyCodeExpiry:{type:Date,required:[!0,"verify code is Expired"]},isVerified:{type:Boolean,default:!1},isAcceptingMessage:{type:Boolean,default:!0},messages:[i]}),n=o().models.User||o().model("User",a)}};var s=require("../../../../webpack-runtime.js");s.C(e);var r=e=>s(s.s=e),t=s.X(0,[379,903,395],()=>r(62633));module.exports=t})();